Leetcode Potd: 4 February, 2024
https://leetcode.com/problems/minimum-window-substring/

Approach:
1) Store string t's characters' frequency in a hashmap. Now we need a way to find the substring (continuous) in linear time since the constraints will not allow O(n^2). Thus, Sliding Window!
2) Use variable length Sliding Window on String s to figure out the start and end indexes of the minimum required substring.
3) Return the substring.

Code:
class Solution {
    public String minWindow(String s, String t) 
    {
        Map<Character, Integer> tMap = new HashMap<>();
        for (char c : t.toCharArray()) tMap.put(c, tMap.getOrDefault(c, 0) + 1);
        
        int left = 0, minLen = Integer.MAX_VALUE, minLenStart = 0;
        int requiredChars = tMap.size(),formedChars = 0;
        Map<Character, Integer> window = new HashMap<>();

        for (int right = 0; right < s.length(); right++) 
        {
            char currentChar = s.charAt(right);
            window.put(currentChar, window.getOrDefault(currentChar, 0) + 1);
            
            if (tMap.containsKey(currentChar) && window.get(currentChar).intValue() == tMap.get(currentChar).intValue()) 
                formedChars++;
            

            while (left <= right && formedChars == requiredChars) 
            {
                if (right - left + 1 < minLen) {
                    minLen = right - left + 1;
                    minLenStart = left;
                }

                char leftChar = s.charAt(left);
                window.put(leftChar, window.get(leftChar) - 1);

                if (tMap.containsKey(leftChar) && window.get(leftChar).intValue() < tMap.get(leftChar).intValue())
                    formedChars--;
                left++;
            }
        }

        if (minLen == Integer.MAX_VALUE)  return "";
        return s.substring(minLenStart, minLenStart + minLen);
    }
    
}