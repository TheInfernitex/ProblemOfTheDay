Leetcode POTD:https://leetcode.com/problems/largest-divisible-subset/description/

Recursive  /  Memoized Code(using map | TLE) : 
public List<Integer> largestDivisibleSubset(int[] nums) 
    {
        //Sort the array in increasing order 
        Arrays.sort(nums);

        //map to memoize. (did not use array since max element can be too big to use)
        Map<String, List<Integer>> memo = new HashMap<>(); 

        List<Integer> build = new ArrayList<Integer>();
        List<Integer> result = new ArrayList<Integer>();
        largest(nums, 0, 1, build, result, memo);

        return result;
    }
    //we can either skip the element or add it if it is divisible by the max elem added thus far
    //Since the max element or the last element added(since it's sorted), will be the LCM of the subset
    public void largest(int[] nums, int i, int max, List<Integer> build, List<Integer> result, Map<String, List<Integer>> memo)
    {
        if (i == nums.length)
        {
            if (build.size() > result.size()) 
            {
                result.clear();
                result.addAll(build);
            }
            return;
        }

        String key = i + "-" + max + "-" +  build.size(); 

         if (memo.containsKey(key)) {
            result.clear();
            result.addAll(memo.get(key));
            return;
        }

        if (nums[i] % max == 0)
        {
            build.add( nums[i] );
            largest(nums, i+1, nums[i], build, result, memo);
            build.remove( build.size()-1 );
        }
        largest(nums, i+1, max, build, result, memo);

        memo.put(key, new ArrayList<Integer>(result));
    }
}


Bottom Up: I was stuck while designing this, here is a great solution which can explain the approach better than I can:
https://leetcode.com/problems/largest-divisible-subset/solutions/4699839/interview-approach-for-beginners-clean-code/

public List<Integer> largestDivisibleSubset(int[] nums) 
    {
        Arrays.sort(nums);

        int n = nums.length;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);

        int maxSize = 1;
        int maxIndex = 0;

        for (int i = 1; i < n; i++) {
            for (int j = 0; j < i; j++) {
                if (nums[i] % nums[j] == 0) {
                    dp[i] = Math.max(dp[i], dp[j] + 1);

                    if (dp[i] > maxSize) {
                        maxSize = dp[i];
                        maxIndex = i;
                    }
                }
            }
        }

        List<Integer> result = new ArrayList<>();
        int currSize = maxSize;
        int currIndex = maxIndex;

        for (int i = maxIndex; i >= 0; i--) {
            if (nums[currIndex] % nums[i] == 0 && dp[i] == currSize) {
                result.add(nums[i]);
                currSize--;
                currIndex = i;
            }
        }

        return result;
    }
}



 
