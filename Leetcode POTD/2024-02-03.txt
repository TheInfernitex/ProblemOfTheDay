Leetcode POTD: 3rd February, 2024
https://leetcode.com/problems/partition-array-for-maximum-sum/


Code:
class Solution {
    public int maxSumAfterPartitioning(int[] arr, int k) 
    {
        int[] dp = new int[arr.length + 1];
        for (int i = 0; i < arr.length; i++) 
        {
            int curMax = 0, curSum = 0;
            for (int j = i; j >= Math.max(0, i - k + 1); j--) 
            {
                curMax = Math.max(curMax, arr[j]);
                int cur = curMax * (i - j + 1) + dp[j];
                curSum = Math.max(curSum, cur);
            }
            dp[i + 1] = curSum;
        }
        return dp[arr.length];
    }
}

Approach:
The line 'at most k' is what made me think of dynamic programming. There were too many edge cases for other solutions. The constraints confirmed my belief. 
So the dp array stores the max sum at each position. i.e. dp[i] stores the answer for the subarray from index min(0,i-k) to i.
Then, we iterate over the array and find the max sum possible by extending the max number of the subarray backwards as far as it can extend. For this we make another loop which runs from i to i-k and checks the max sum we can get by extending the max number(currMax) from i to j.
With this, we get the max sum possible for array 0 to i in currSum.
It's then stored in the array and the next iteration begins.
